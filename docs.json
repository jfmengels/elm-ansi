[{"name":"Ansi","comment":" When building for the terminal we have 3 layers of abstraction. This package represents the bottom most layer. With the functions provided here you can manipulate each character within the terminal with minute control.\n\n\n## Erasing\n\n@docs clearScreen\n@docs clearUp\n@docs clearDown\n@docs clearLine\n@docs clearLineAfter\n@docs clearLineBefore\n\n\n## Styles\n\n@docs backgroundColor\n\n\n## State\n\n@docs saveScreen\n@docs restoreScreen\n@docs scrollUpBy\n@docs scrollDownBy\n\n\n## Helpers\n\n@docs regex\n@docs emojiRegex\n\n\n## Parsing & Querying\n\n@docs Key\n@docs decodeKey\n@docs getCommand\n@docs isDownArrow\n@docs isLeftArrow\n@docs isRightArrow\n@docs isUpArrow\n\n\n## Other\n\n@docs setTitle\n\n","unions":[],"aliases":[{"name":"Key","comment":" ","args":[],"type":"{ code : Maybe.Maybe String.String, ctrl : Basics.Bool, meta : Basics.Bool, name : String.String, sequence : String.String, shift : Basics.Bool }"}],"values":[{"name":"backgroundColor","comment":" All content after this will have the specified background color until either a new color is set or this is reset with `Ansi.Color.reset`.\n","type":"Ansi.Color.Color -> String.String"},{"name":"clearDown","comment":" Clears the screen from the cursor down\n","type":"String.String"},{"name":"clearLine","comment":" Clears the line the cursor is on\n","type":"String.String"},{"name":"clearLineAfter","comment":" Clears the line from the cursor to the end\n","type":"String.String"},{"name":"clearLineBefore","comment":" Clears the line from the beginning through the cursor\n","type":"String.String"},{"name":"clearScreen","comment":" Clears all of the screen\n","type":"String.String"},{"name":"clearUp","comment":" Clears the screen from the cursor up\n","type":"String.String"},{"name":"decodeKey","comment":" You can configure Node to listen for key events, this will parse those into a nice record.\n","type":"Json.Decode.Decoder Ansi.Key"},{"name":"emojiRegex","comment":" Matches emojis\n\nBorrowed from <https://github.com/mathiasbynens/emoji-regex>\n\n","type":"Regex.Regex"},{"name":"getCommand","comment":" If the input is an ansi command, return the command portion, with the escape code removed.\n","type":"String.String -> Maybe.Maybe String.String"},{"name":"isDownArrow","comment":" ","type":"String.String -> Basics.Bool"},{"name":"isLeftArrow","comment":" ","type":"String.String -> Basics.Bool"},{"name":"isRightArrow","comment":" ","type":"String.String -> Basics.Bool"},{"name":"isUpArrow","comment":" ","type":"String.String -> Basics.Bool"},{"name":"regex","comment":" Matches regex characters\n\nBorrowed from <https://github.com/chalk/ansi-regex>\n\n","type":"Regex.Regex"},{"name":"restoreScreen","comment":" Restore the position of the cursor to the last saved state\n","type":"String.String"},{"name":"saveScreen","comment":" Save the current position of the cursor\n","type":"String.String"},{"name":"scrollDownBy","comment":" Scrolls the terminal down\n","type":"Basics.Int -> String.String"},{"name":"scrollUpBy","comment":" Scrolls the terminal up\n","type":"Basics.Int -> String.String"},{"name":"setTitle","comment":" Sets the title of the terminal\n","type":"String.String -> String.String"}],"binops":[]},{"name":"Ansi.Color","comment":" For coloring either the font or the background.\n\n@docs Color\n@docs Location\n\n@docs encode\n@docs reset\n\n\n## Basics\n\n@docs black\n@docs blue\n@docs cyan\n@docs green\n@docs magenta\n@docs red\n@docs white\n@docs yellow\n\n\n## Custom\n\n@docs rgb\n\n\n## Converting from/to HTML colors\n\n@docs fromHtmlColor\n@docs toHtmlColor\n\n","unions":[{"name":"Color","comment":" ","args":[],"cases":[]},{"name":"Location","comment":" Whether the color is applied to the `Font` or the `Background`\n","args":[],"cases":[["Font",[]],["Background",[]]]}],"aliases":[],"values":[{"name":"black","comment":" ","type":"Ansi.Color.Color"},{"name":"blue","comment":" ","type":"Ansi.Color.Color"},{"name":"cyan","comment":" ","type":"Ansi.Color.Color"},{"name":"encode","comment":" Encode the color to a `String` for printing to the terminal\n","type":"Ansi.Color.Location -> Ansi.Color.Color -> String.String"},{"name":"fromHtmlColor","comment":" Convert from [avh4/elm-color](https://package.elm-lang.org/packages/avh4/elm-color/latest/) to an ANSI color\n","type":"Color.Color -> Ansi.Color.Color"},{"name":"green","comment":" ","type":"Ansi.Color.Color"},{"name":"magenta","comment":" ","type":"Ansi.Color.Color"},{"name":"red","comment":" ","type":"Ansi.Color.Color"},{"name":"reset","comment":" ","type":"Ansi.Color.Location -> String.String"},{"name":"rgb","comment":" Specify the amount of red, green, and blue in the range of 0 - 255\n","type":"{ red : Basics.Int, green : Basics.Int, blue : Basics.Int } -> Ansi.Color.Color"},{"name":"toHtmlColor","comment":" Convert from an ANSI color to [avh4/elm-color](https://package.elm-lang.org/packages/avh4/elm-color/latest/)\n","type":"Ansi.Color.Color -> Color.Color"},{"name":"white","comment":" ","type":"Ansi.Color.Color"},{"name":"yellow","comment":" ","type":"Ansi.Color.Color"}],"binops":[]},{"name":"Ansi.Cursor","comment":"\n\n\n## Movement\n\n@docs moveUpBy\n@docs moveDownBy\n@docs moveForwardBy\n@docs moveBackwardBy\n@docs moveForwardLines\n@docs moveBackwardLines\n@docs moveTo\n@docs moveToColumn\n@docs savePosition\n@docs restorePosition\n\n\n## Visibility\n\n@docs hide\n@docs show\n\n","unions":[],"aliases":[],"values":[{"name":"hide","comment":" Hide the cursor\n","type":"String.String"},{"name":"moveBackwardBy","comment":" Move the cursor forward N columns. In an LTR language this is to the left and in an RTL language it's to the right.\n","type":"Basics.Int -> String.String"},{"name":"moveBackwardLines","comment":" Move the cursor backward N lines.\n","type":"Basics.Int -> String.String"},{"name":"moveDownBy","comment":" Move the cursor down N lines\n","type":"Basics.Int -> String.String"},{"name":"moveForwardBy","comment":" Move the cursor forward N columns. In an LTR language this is to the right and in an RTL language it's to the left.\n","type":"Basics.Int -> String.String"},{"name":"moveForwardLines","comment":" Move the cursor forward N lines.\n","type":"Basics.Int -> String.String"},{"name":"moveTo","comment":" Move the cursor to the specified row and column\n","type":"{ row : Basics.Int, column : Basics.Int } -> String.String"},{"name":"moveToColumn","comment":" Move the cursor to the specified column\n","type":"Basics.Int -> String.String"},{"name":"moveUpBy","comment":" Move the cursor up N lines\n","type":"Basics.Int -> String.String"},{"name":"restorePosition","comment":" Move the cursor back to the last saved position\n","type":"String.String"},{"name":"savePosition","comment":" Save the cursor's position\n","type":"String.String"},{"name":"show","comment":" Show the cursor if it was hidden\n","type":"String.String"}],"binops":[]},{"name":"Ansi.Font","comment":" When styling your terminal there are 2 sets of commands, those that add the style and those that remove it. This does make this a little more difficult to use as you have to remember to reset each style when you no longer want it applied. It does however let you mix and match styles however you want.\n\n\n## Color\n\n@docs color\n@docs invert\n@docs resetInvert\n\n\n## Style\n\n@docs bold\n@docs faint\n@docs resetBoldFaint\n\n@docs italic\n@docs resetItalic\n\n@docs underline\n@docs resetUnderline\n\n@docs strikeThrough\n@docs resetStrikeThrough\n\n@docs resetAll\n\n\n## Visibility\n\n@docs hide\n@docs show\n\n\n## Unsupported\n\nThese have some limited support but it varies greatly by terminal\n\n@docs blink\n@docs resetBlink\n\n","unions":[],"aliases":[],"values":[{"name":"blink","comment":" ","type":"String.String"},{"name":"bold","comment":" ","type":"String.String"},{"name":"color","comment":" ","type":"Ansi.Color.Color -> String.String"},{"name":"faint","comment":" The opposite of bold\n","type":"String.String"},{"name":"hide","comment":" ","type":"String.String"},{"name":"invert","comment":" ","type":"String.String"},{"name":"italic","comment":" ","type":"String.String"},{"name":"resetAll","comment":" ","type":"String.String"},{"name":"resetBlink","comment":" ","type":"String.String"},{"name":"resetBoldFaint","comment":" ","type":"String.String"},{"name":"resetInvert","comment":" ","type":"String.String"},{"name":"resetItalic","comment":" ","type":"String.String"},{"name":"resetStrikeThrough","comment":" ","type":"String.String"},{"name":"resetUnderline","comment":" ","type":"String.String"},{"name":"show","comment":" ","type":"String.String"},{"name":"strikeThrough","comment":" ","type":"String.String"},{"name":"underline","comment":" ","type":"String.String"}],"binops":[]},{"name":"Ansi.String","comment":" Various functions for working with ANSI strings. E.g. when measuring the width of an ANSI string you don't want to include any of the command characters, only those that are displayed in the terminal.\n\n@docs width\n@docs padRight\n@docs strip\n\n","unions":[],"aliases":[],"values":[{"name":"padRight","comment":" Add the specified string to the right side of your `String` so that it's the specified length. If this is impossible, e.g. in `padRight 10 \"🌈\" \"hello\"` the 🌈 is 2 columns wide meaning that your result will be either 9 or 11 columns wide, then white space will be added to fill the remaining space.\n","type":"Basics.Int -> String.String -> String.String -> String.String"},{"name":"strip","comment":" Remove ANSI characters from a `String`. Mostly useful for things like measuring a `String`'s width.\n","type":"String.String -> String.String"},{"name":"width","comment":" Measures the width of a `String` in terminal columns.\n\nCopied from <https://github.com/sindresorhus/string-width/blob/main/index.js>\n\n","type":"String.String -> Basics.Int"}],"binops":[]},{"name":"Terminal","comment":" Helpers for drawing boxes\n\n\n## Color\n\n@docs color\n@docs backgroundColor\n@docs invert\n\n\n## Style\n\n@docs bold\n@docs faint\n@docs italic\n@docs underline\n@docs strikeThrough\n\n@docs resetFont\n\n\n## Unsupported\n\nThese have some limited support but it varies greatly by terminal\n\n@docs blink\n\n","unions":[],"aliases":[],"values":[{"name":"backgroundColor","comment":" Sets the color behind the text\n","type":"Ansi.Color.Color -> String.String -> String.String"},{"name":"blink","comment":" Not supported by some terminals\n","type":"String.String -> String.String"},{"name":"bold","comment":" ","type":"String.String -> String.String"},{"name":"color","comment":" Sets the color of the text\n","type":"Ansi.Color.Color -> String.String -> String.String"},{"name":"faint","comment":" The opposite of bold\n","type":"String.String -> String.String"},{"name":"invert","comment":" Swaps the font and background colors\n","type":"String.String -> String.String"},{"name":"italic","comment":" ","type":"String.String -> String.String"},{"name":"resetFont","comment":" Resets all font settings on the passed in value\n","type":"String.String -> String.String"},{"name":"strikeThrough","comment":" ","type":"String.String -> String.String"},{"name":"underline","comment":" ","type":"String.String -> String.String"}],"binops":[]},{"name":"Terminal.Box","comment":" Styles borrowed from <https://www.npmjs.com/package/cli-boxes>\n\n@docs Box\n\n@docs single\n@docs double\n@docs bold\n@docs classic\n@docs custom\n@docs doubleSingle\n@docs rounded\n@docs singleDouble\n\n@docs draw\n\n","unions":[],"aliases":[{"name":"Box","comment":" ","args":[],"type":"{ topLeft : String.String, top : String.String, topRight : String.String, right : String.String, bottomRight : String.String, bottom : String.String, bottomLeft : String.String, left : String.String }"}],"values":[{"name":"bold","comment":" A thick box with sharp corners\n\n┏━━━━┓\n┃ bd ┃\n┗━━━━┛\n\n","type":"Terminal.Box.Box"},{"name":"classic","comment":" A thin box with plus shaped corners\n\n+----+\n| cs |\n+----+\n\n","type":"Terminal.Box.Box"},{"name":"custom","comment":" Design your own box, suash as\n\n•————•\n∫ cm ∫\n•————•\n\nTODO: This may cause issues\n\n","type":"{ topLeft : Char.Char, top : Char.Char, topRight : Char.Char, right : Char.Char, bottomRight : Char.Char, bottom : Char.Char, bottomLeft : Char.Char, left : Char.Char } -> Terminal.Box.Box"},{"name":"double","comment":" 2 thin, nested boxes with sharp corners\n\n╔════╗\n║ db ║\n╚════╝\n\n","type":"Terminal.Box.Box"},{"name":"doubleSingle","comment":" A box with sharp corners, thin on the sides and doubled on top and bottom\n\n╒════╕\n│ ds │\n╘════╛\n\n","type":"Terminal.Box.Box"},{"name":"draw","comment":" Helps to draw the box for you\n","type":"{ width : Basics.Int, height : Basics.Int } -> Terminal.Box.Box -> String.String"},{"name":"rounded","comment":" A thin box with rounded corners\n\n╭────╮\n│ rd │\n╰────╯\n\n","type":"Terminal.Box.Box"},{"name":"single","comment":" A thin box with sharp corners\n\n┌────┐\n│ sl │\n└────┘\n\n","type":"Terminal.Box.Box"},{"name":"singleDouble","comment":" A box with sharp corners, thin on the top and bottom and doubled up on the sides\n\n╓────╖\n║ sd ║\n╙────╜\n\n","type":"Terminal.Box.Box"}],"binops":[]}]